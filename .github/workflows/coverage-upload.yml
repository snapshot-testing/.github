name: Coverage Upload

on:
  workflow_call:
    inputs:
      xcode-version:
        default: '16.4'
        required: false
        type: string
      platform:
        default: 'macOS-15'
        required: false
        type: string

jobs:
  coverage-upload:
    runs-on: ${{ inputs.platform }}
    steps:
      - name: 游닌 Download All Artifacts
        uses: actions/download-artifact@v5.0.0
        with:
          path: artifacts

      - name: 游늬 List Downloaded Artifacts
        run: |
          echo "Artifacts downloaded:"
          ls -la artifacts/
          echo "Subdirectories:"
          find artifacts -type d -mindepth 1 -maxdepth 1

      - name: 驕놾잺 Xcode Select
        run: sudo xcode-select -switch /Applications/Xcode_${{ inputs.xcode-version }}.app

      - name: 游늬 Process Coverage for Each Destination
        run: |
          # Iterar por cada subpasta de artefato
          for artifact_dir in artifacts/*/; do
            if [ -d "$artifact_dir" ]; then
              echo "=== Processing: $artifact_dir ==="
              (
                cd "$artifact_dir"

                # Extrair o nome do diret칩rio (remove "artifacts/" e "/")
                ARTIFACT_DIR_NAME=$(basename "$artifact_dir")

                # Gerar MD5 do nome do diret칩rio
                ARTIFACT_MD5=$(echo -n "$ARTIFACT_DIR_NAME" | md5sum | cut -d ' ' -f1)

                echo "Artifact directory: $ARTIFACT_DIR_NAME"
                echo "MD5: $ARTIFACT_MD5"

                # Encontrar todos os arquivos .profdata
                PROFDATA_FILES=$(find . -name "*.profdata" | head -n 1)
                PROFDATA_FILE="$PROFDATA_FILES"

                if [ -z "$PROFDATA_FILE" ]; then
                  echo "Nenhum arquivo .profdata encontrado em $artifact_dir"
                  exit 1
                fi

                # Encontrar todos os bundles .xctest
                find . -name "*.xctest" -type d | while read -r xctest_bundle; do
                  if [ -n "$xctest_bundle" ]; then
                    # Extrair o nome base do bundle (sem .xctest)
                    BUNDLE_NAME=$(basename "$xctest_bundle" .xctest)

                    # Procurar o execut치vel usando glob pattern (funciona em todas as plataformas)
                    EXECUTABLE_PATH=$(find "$xctest_bundle" -name "$BUNDLE_NAME" -type f -not -path "*/.dSYM/*" | head -n 1)

                    # Verificar se o execut치vel existe
                    if [ -n "$EXECUTABLE_PATH" ] && [ -f "$EXECUTABLE_PATH" ]; then
                      echo "Processando cobertura para: $BUNDLE_NAME"
                      echo "Execut치vel encontrado em: $EXECUTABLE_PATH"

                      # Nome do arquivo de sa칤da usando MD5 do artifact directory
                      OUTPUT_FILE="${{ github.workspace }}/${ARTIFACT_MD5}.lcov"

                      # Gerar relat칩rio de cobertura
                      xcrun llvm-cov export "$EXECUTABLE_PATH" \
                        -format="lcov" \
                        -instr-profile="$PROFDATA_FILE" \
                        -ignore-filename-regex=".build|Tests" > "$OUTPUT_FILE"

                      echo "Gerado: $OUTPUT_FILE"
                    else
                      echo "Execut치vel n칚o encontrado para: $BUNDLE_NAME"
                      echo "Buscado em: $xctest_bundle"
                    fi
                  fi
                done
              )
            fi
          done

      - name: 游늶 List Generated LCOV Files
        run: |
          echo "LCOV files generated:"
          ls -la *.lcov

      - name: 游닍 Upload to Codecov
        uses: codecov/codecov-action@v5.5.0
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
          files: "*.lcov"
          verbose: true